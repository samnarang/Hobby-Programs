{
  "name": "Java Programs",
  "tagline": "Project containing all my Java programs",
  "body": "### Steps To Install Git [on Windows]\r\n1)Download the latest Git for Windows installer.<br />\r\n2)When you've successfully started the installer, you should see the Git Setup wizard screen. Follow the Next and Finish       prompts to complete the installation. The default options are pretty sensible for most users.<br />\r\n3)Open a Command Prompt (or Git Bash if during installation you elected not to use Git from the Windows Command Prompt).<br />\r\n4)Run the following commands to configure your Git username and email using the following commands. These details will be associated with any commits that you create:<br />\r\n\r\n<pre>$ git config --global user.name \"Your UserName\"<br />\r\n $ git config --global user.email \"Your Email\"</pre>\r\n\r\n### Experience With GitHub\r\nTo complete the task, I had to sign up on GitHub, I went to the site and clicked on register, the process was pretty standard. I filled in the details and registered. Immediately after that the guide to using GitHub popped up, I read it and followed the steps to create my first repository. I uploaded the programs I had written in java and completed my task.\r\n\r\n### Experience With Git\r\nI faced a lot of difficulties when I was using Git. I didn't know any of the commands and so I had to search them on Google. I still am not quite used to using it but it is a pretty useful tool if you learn to use it properly.\r\n\r\n### Steps To Create A New Repository Using Command Line\r\n<pre>echo \"# abcd\" >> README.md\r\ngit init\r\ngit add README.md\r\ngit commit -m \"first commit\"\r\ngit remote add origin https://github.com/samnarang/abcd.git\r\ngit push -u origin master</pre>\r\n \r\n### Steps to Push an Existing Repository from the Command Line\r\n<pre>git remote add origin https://github.com/samnarang/abcd.git\r\ngit push -u origin master</pre>\r\n \r\n### Commands In Git\r\n\r\nFunction | Command\r\n---------|--------\r\nTell Git who you are | git config --global user.name \"Sam Narang\"\r\n                     | git config --global user.email sam@example.com\r\nCreate a new local repository | git init\r\nCreate a working copy of a local repository | git clone /path/to/repository\r\nFor a remote server, use | git clone username@host:/path/to/repository\r\nAdd one or more files to staging (index) | git add <filename>\r\n                                         | git add *\r\nCommit changes to head (but not yet to the remote repository) | git commit -m \"Commit message\"\r\nCommit any files you've added with git add, and also commit any files you've changed since then | git commit -a\r\nSend changes to the master branch of your remote repository | git push origin master\r\nStatus\tList the files you've changed and those you still need to add or commit | git status\r\nIf you haven't connected your local repository to a remote server, add the server to be able to push to it | git remote add origin <server>\r\nList all currently configured remote repositories | git remote -v\r\nCreate a new branch and switch to it | git checkout -b <branchname>\r\nSwitch from one branch to another | git checkout <branchname>\r\nList all the branches in your repo, and also tell you what branch you're currently in | git branch\r\nDelete the feature branch | git branch -d <branchname>\r\nPush the branch to your remote repository, so others can use it | git push origin <branchname>\r\nPush all branches to your remote repository | git push --all origin\r\nDelete a branch on your remote repository | git push origin :<branchname>\r\nFetch and merge changes on the remote server to your working directory | git pull\r\nTo merge a different branch into your active branch | git merge <branchname>\r\nView all the merge conflicts | git diff\r\nView the conflicts against the base file | git diff --base <filename>\r\nPreview changes, before merging | git diff <sourcebranch> <targetbranch>\r\nAfter you have manually resolved any conflicts, you mark the changed file | git add <filename>\r\nYou can use tagging to mark a significant changeset, such as a release | git tag 1.0.0 <commitID>\r\nCommitId is the leading characters of the changeset ID, up to 10, but must be unique. Get the ID using | git log\r\nPush all tags to remote repository | git push --tags origin\r\nIf you mess up, you can replace the changes in your working tree with the last content in head. Changes already added to the index, as well as new files, will be kept | git checkout -- <filename>\r\nInstead, to drop all your local changes and commits, fetch the latest history from the server and point your local master branch at it, do this | git fetch origin\r\n                      | git reset --hard origin/master\r\nSearch the working directory for foo() | git grep \"foo()\"\r\n\r\n### Other Projects\r\nSince I am new to GitHub, this is my first project. However, I will be working on some new projects in the future. \r\n \r\n### Authors And Contributor\r\nAuthor : Sam Narang (@samnarang)<br />\r\nContributor : Sajal Narang (@unstablebrainiac)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}